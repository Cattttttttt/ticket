name: Deploy to LeanEngine

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment that this workflow deploy to, rnd or prod'
        default: 'rnd'
        required: false
        type: string
      targets:
        description: 'Target that this workflow deploy to, accept an array-like string, e.g `tap,xd`'
        required: false
        type: string

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('node:fs');

            const matrixJson = JSON.parse(fs.readFileSync('./.github/workflows/matrix_includes.json', 'utf-8'));

            const env = core.getInput('environment', { trimWhitspace: true }) || 'rnd';
            const targets = core.getInput('targets', { trimWhitespace: true }).split(',').map((s) => s.trim());

            if (env !== 'rnd' && env !== 'prod') {
              core.setFailed(`environment: expect 'rnd' or 'prod', found ${env}`);
              return;
            }

            core.setOutput(
              'matrix',
              (
                targets?.length
                  ? matrixJson.filter(({ name }) => targets.includes(name))
                  : matrixJson
              ).filter(({ only }) => !only && only === env).map((v) => ({ ...v, region: v.region.replace('-', '_') }))
            )

  deployment:
    runs-on: ubuntu-latest
    needs: matrix_prep
    environment: ${{ inputs.environment }}
    continue-on-error: true
    strategy:
      matrix:
        include: ${{ needs.matrix_prep.outputs.matrix }}
    steps:
      - name: trigger webhook
        run: |
          curl -X POST \
            '${{ format('{0}/1.1/engine/groups/{1}/production/version?gitTag={2}&token={3}', vars[format('LEANCLOUD_ENDPOINT_{0}', matrix.region)], matrix.group, matrix.branch, secrets[format('{0}_TOKEN', matrix.name)]) }}'
